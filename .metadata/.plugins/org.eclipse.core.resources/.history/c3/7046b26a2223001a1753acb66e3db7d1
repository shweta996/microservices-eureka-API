package com.bridgelabz.fundoonotes.service;

import java.util.Optional;


import java.util.logging.Logger;

import org.hibernate.validator.internal.util.logging.LoggerFactory;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.ModelAttribute;

import com.bridgelabz.fundoonotes.dto.Email;
import com.bridgelabz.fundoonotes.dto.ForgotDto;
import com.bridgelabz.fundoonotes.dto.UserDto;
import com.bridgelabz.fundoonotes.dto.loginDto;
import com.bridgelabz.fundoonotes.exception.UserException;
import com.bridgelabz.fundoonotes.model.User;
import com.bridgelabz.fundoonotes.repository.UserRepository;
import com.bridgelabz.fundoonotes.response.Response;
import com.bridgelabz.fundoonotes.utility.EncryptUtil;
import com.bridgelabz.fundoonotes.utility.JWTTokenGenerator;
import com.bridgelabz.fundoonotes.utility.MailUtil;
//import com.bridgelabz.fundoonotes.utility.RabbitMqUtil;
import com.bridgelabz.fundoonotes.utility.TokenGenerator;

/**
 * @author:-shweta kale.
 * 
 *
 */

@SuppressWarnings("unused")

@Service("UserService")
public class UserServiceImpl implements UserService {

	@Autowired
	private ModelMapper modelMapper;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private PasswordEncoder encoder;

	@Autowired
	private TokenGenerator tokenGenerator;

   @Autowired
	private MailUtil mailSender;
	
	/*
	 * @Autowired private RabbitMqUtil mailSender;
	 */
	@Autowired
	private RedisTemplate<String,Object> redisTemplate;


	@Autowired
	private EncryptUtil encryptUtil;

	Logger logger = Logger.getLogger(UserServiceImpl.class.getName());

	/**
	 * details:-for register user.
	 */
	@Override
	public String Register(UserDto userdto, StringBuffer requestUrl) {
		Optional<User> isEmail = userRepository.findByEmail(userdto.getEmail());
		User user = modelMapper.map(userdto, User.class);

		if (!isEmail.isPresent()) {

			user.setPassword(encoder.encode(userdto.getPassword()));
			User saveUser = userRepository.save(user);

			try {

				logger.info("user id:" + user.getId());
				String token = tokenGenerator.generateToken(saveUser.getId());
				logger.info("token:" + token);
				String activationUrl = requestUrl.substring(0, requestUrl.lastIndexOf("/")) + "/verification/" + token;
				Email email = new Email();
				email.setTo(saveUser.getEmail());
				email.setSubject("you have registered successfully.");
				email.setBody("\n please verify your email by using activation URL:\n" + activationUrl);
				mailSender.send(email);
				return "verification email send to your mail successfully";

			} catch (Exception ex) {
				ex.printStackTrace();
				throw new UserException("something went wrong");
			}
		} else {
			throw new UserException("Existing user");
		}

	}

	/**
	 * details:-for login user.
	 */
   	@Override
	public String Login(loginDto logindto) {
		Optional<User> optionalUser = userRepository.findByEmail(logindto.getEmail());
		if (optionalUser.isPresent()) {
			User user = optionalUser.get();
			String id = user.getId();
			try {
				if (encryptUtil.isPassword(logindto, user)) {
					if (user.isVerify()) {
						
						String token= tokenGenerator.generateToken(user.getId());
						redisTemplate.opsForHash().put("fundooNotes", user.getEmail(), token);
						return token;

					} else {
						throw new UserException("please verify your mail");
					}

				} else {
					throw new UserException("please enter correct password");
				}
			} catch (Exception ex) {
				ex.printStackTrace();
				throw new UserException("Authentication failed");
			}

		} else {
			throw new UserException("user not found");
		}
	}

	/**
	 * details:-to check user is validate or not.
	 */
	@Override
	public String validateUser(String token) {
		String id = tokenGenerator.verifyToken(token);
		Optional<User> optional = userRepository.findById(id);
		if (optional.isPresent()) {
			User user = optional.get();
			user.setVerify(true);
			userRepository.save(user);
			return "user verified";
		} else {
			throw new UserException("user is not registered");
		}

	}

	/**
	 * details:-for forget user's password.
	 */
	@Override
	public String forgotPassword(String email, StringBuffer requestUrl) {
		Optional<User> optionalUser = userRepository.findByEmail(email);
		User user = optionalUser.get();
		String id = user.getId();
		if (optionalUser.isPresent()) {
			try {
				String token = tokenGenerator.generateToken(id);
				logger.info("token:" + token);
				String resetUrl = "http://localhost:4200/reset/" + token;
				Email sendEmail = new Email();
				sendEmail.setTo(user.getEmail());
				sendEmail.setSubject("resetPassword");
				sendEmail.setBody("\n please reset your password by using following link:\n" + resetUrl);
				mailSender.send(sendEmail);
				return "reset password link send successfully";

			} catch (Exception ex) {
				ex.printStackTrace();
				throw new UserException("Internal server error");

			}
		} else {
			throw new UserException("user is not present");
		}

	}

	/**
	 * details:-for reset password.
	 */
	@Override
	public String resetPassword(String password, String token) {
		String id = tokenGenerator.verifyToken(token);
		Optional<User> optinalUser = userRepository.findById(id);
		if (optinalUser.isPresent()) {
			User user = optinalUser.get();
			user.setPassword(encoder.encode(password));
			userRepository.save(user);
			return "password change successfully";
		} else {
			throw new UserException("password not changed");
		}

	}

}
